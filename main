#include <Arduino.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>

const char* ssid = "EG8115V5";
const char* password = "alpha147147";
const char* mqtt_server = "192.168.18.186";
const char* mqtt_username = "esp32_vent";
const char* mqtt_password = "alpha147147";
const char* mqtt_topic = "lcabs1993/ESP32/Vent";
const char* mqtt_debug_topic = "lcabs1993/ESP32/Vent/debug";
bool mqttConnected = false; // Variable to track MQTT connection status

const int buttonPins[] = {14, 12, 13, 15}; // Pins for buttons
const int relayPins[] = {16, 17, 18};      // Pins for relays

int buttonStates[4] = {0, 0, 0, 0};     // Array to store button states
int selectedSpeed = -1;                  // Variable to store the selected speed

WiFiClient espClient;
PubSubClient client(espClient);

void setupWiFi();
void setupMQTT();
void reconnectMQTT();
void updateRelays();
void turnOffAllRelays();
void activateRelay(int relayNumber);
void mqttCallback(char* topic, byte* payload, unsigned int length);
void publishDebugMessage();

void setup() {
  Serial.begin(115200);

  setupWiFi();
  setupMQTT();

  // Initialize button pins as inputs 
  for (int i = 0; i < 4; i++) {
    pinMode(buttonPins[i], INPUT_PULLUP);
  }

  // Initialize relay pins as outputs
  for (int i = 0; i < 3; i++) {
    pinMode(relayPins[i], OUTPUT);
  }
  turnOffAllRelays();
}

void loop() {
  if (!client.connected()) {
    mqttConnected = false;
    reconnectMQTT();
  }

  client.loop();

  // Read the state of each button
  for (int i = 0; i < 4; i++) {
    int buttonState = digitalRead(buttonPins[i]);

    // Check if the button state has changed
    if (buttonState != buttonStates[i]) {
      buttonStates[i] = buttonState;

      // If button state is HIGH (active), update selectedSpeed
      if (buttonState == LOW) {
        selectedSpeed = i;
        updateRelays();
        if (mqttConnected) { // Check if MQTT is connected
          publishDebugMessage();
        }
      }
    }
  }

 // delay(50); // Wait for 50 milliseconds
}

void setupWiFi() {
  Serial.println("Connecting to WiFi");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
}

void setupMQTT() {
  client.setServer(mqtt_server, 1883);
  client.setCallback(mqttCallback);
}

void reconnectMQTT() {
  while (!client.connected()) {
    Serial.println("Attempting MQTT connection...");
    if (client.connect("ESP32Client", mqtt_username, mqtt_password)) {
      mqttConnected = true;
      Serial.println("Connected to MQTT");
      client.subscribe(mqtt_topic);
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(" Retrying in 5 seconds...");
      delay(5000);
    }
  }
}

void mqttCallback(char* topic, byte* payload, unsigned int length) {
  payload[length] = '\0'; // Null-terminate the payload

  if (strcmp(topic, mqtt_topic) == 0) {
    int speed = atoi((char*)payload);
    if (speed >= 0 && speed <= 3) {
      selectedSpeed = speed;
      updateRelays();
      publishDebugMessage();
    }
  }
}

void updateRelays() {
  // Control relays based on the selected speed
  switch (selectedSpeed) {
    case 0:
      turnOffAllRelays();
      break;
    case 1:
      turnOffAllRelays();
      delay(200); // Wait for 50 milliseconds
      activateRelay(1);
      break;
    case 2:
      turnOffAllRelays();
      delay(200); // Wait for 50 milliseconds
      activateRelay(2);
      break;
    case 3:
      turnOffAllRelays();
      delay(200); // Wait for 50 milliseconds
      activateRelay(3);
      break;
    default:
      break;
  }
}

void turnOffAllRelays() {
  // Turn off all relays
  for (int i = 0; i < 3; i++) {
    digitalWrite(relayPins[i], HIGH);
  }
}

void activateRelay(int relayNumber) {
  // Activate the specified relay
  if (relayNumber >= 1 && relayNumber <= 3) {
    digitalWrite(relayPins[relayNumber - 1], LOW);
  }
}

void publishDebugMessage() {

 // Create a JSON object
  StaticJsonDocument<200> jsonDocument;

  // Add button states to JSON
  JsonArray buttonStatesArray = jsonDocument.createNestedArray("buttonStates");
  for (int i = 0; i < 4; i++) {
    buttonStatesArray.add(buttonStates[i]);
  }

  // Add selected speed to JSON
  jsonDocument["selectedSpeed"] = selectedSpeed;

  // Add relay states to JSON
  JsonArray relayStatesArray = jsonDocument.createNestedArray("relayStates");
  for (int i = 0; i < 3; i++) {
    relayStatesArray.add(digitalRead(relayPins[i]));
  }

  // Convert JSON to string
  String jsonString;
  serializeJson(jsonDocument, jsonString);

  // Publish the JSON string
  client.publish("lcabs1993/ESP32/Vent/Json", jsonString.c_str());

  // Publish the debug message
 // client.publish(mqtt_debug_topic,message.c_str());

}
